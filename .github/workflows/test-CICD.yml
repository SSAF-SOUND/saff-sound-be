name: test CICD to AWS EC2

on:
  push:
    branches:
      - test
  pull_request:
    branches:
      - test

# 리전, 버킷 이름, CodeDeploy 앱 이름, CodeDeploy 배포 그룹 이름
env:
  AWS_REGION: ap-northeast-2
  S3_BUCKET_NAME: ssaf-sound-deploy-s3-bucket
  CODE_DEPLOY_APPLICATION_NAME:	ssaf-sound-codedeploy-app
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: ssaf-sound-deployment-group
  APPLICATION_DIR: src/main/resources
  APPLICATION_OAUTH: ${{ secrets.APPLICATION_OAUTH }}
  APPLICATION_OAUTH_FILENAME: application-oauth.yml
  APPLICATION_CLOUD: ${{ secrets.APPLICATION_CLOUD }}
  APPLICATION_CLOUD_FILENAME: application-cloud.yml
  APPLICATION_SECURITY: ${{ secrets.APPLICATION_SECURITY }}
  APPLICATION_SECURITY_FILENAME: application-security.yml
  APPLICATION_SCRAPER: ${{secrets.APPLICATION_SCRAPER}}
  APPLICATION_SCRAPER_FILENAME: application-scraper.yml

permissions:
  id-token: write
  contents: write

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      # (0) 시간 출력
      - name: Get Current Time
        uses: 1466587594/get-current-time@v2
        id: current-time
        with:
          format: YYYY-MM-DDTHH:mm:ss
          timezone: 'Asia/Seoul'

      - name: Print Current Time
        run: echo "Current Time=${{steps.current-time.outputs.formattedTime}}" # current-time 에서 지정한 포맷대로 현재 시간 출력
        shell: bash

      # (1) 기본 체크아웃
      - name: Checkout
        uses: actions/checkout@v3

      # (2) JDK 11 세팅
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'temurin'

      # (3) 환경변수 파일 생성
      - name: Copy properties
        run: echo $APPLICATION_OAUTH > $APPLICATION_DIR/$APPLICATION_OAUTH_FILENAME &&
          echo $APPLICATION_CLOUD > $APPLICATION_DIR/$APPLICATION_CLOUD_FILENAME &&
          echo $APPLICATION_SECURITY > $APPLICATION_DIR/$APPLICATION_SECURITY_FILENAME &&
          echo $APPLICATION_SCRAPER > $APPLICATION_DIR/$APPLICATION_SCRAPER_FILENAME

      # (4) gradlew 권한 설정
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # (5) Gradle build (Test 제외)
      - name: Build with Gradle
        uses: gradle/gradle-build-action@0d13054264b0bb894ded474f08ebb30921341cee
        with:
          arguments: clean build -x test

      # (6) 전송할 파일 디렉토리 생성
      - name: Make file directory for transfer
        run: mkdir deploy &&
          cp build/libs/*.jar deploy/ &&
          cp appspec.yml deploy/ &&
          cp script/start.sh deploy/ &&
          cp script/start.sh deploy/

      # (7) 압축
      - name: Make zip
        run: zip -r -qq -j SSAF-SOUND-APP.zip deploy

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production
    needs: Build

    steps:
      # (1) 기본 체크아웃
      - name: Checkout
        uses: actions/checkout@v3

      # (2) AWS 인증 (IAM 사용자 Access Key, Secret Key 활용)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # (3) 빌드 결과물을 카피 방식으로 S3 버킷에 업로드
      - name: Upload to AWS S3
        run: aws s3 cp --region $AWS_REGION SSAF-SOUND-APP.zip s3://$S3_BUCKET_NAME/SSAF-SOUND-APP.zip

      # (4) S3 버킷에 있는 파일을 대상으로 CodeDeploy 실행
      - name: Deploy to AWS EC2 from S3
        run: |
          aws deploy create-deployment \
            --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
            --deployment-config-name CodeDeployDefault.AllAtOnce -file-exists-behavior OVERWRITE \
            --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
            --s3-location bucket=$S3_BUCKET_NAME,key=SSAF-SOUND-APP.zip,bundleType=zip